#include <statistics/chi2.h>

#include <gtest/gtest.h>

#include "testutil.h"

namespace mixer {

TEST(chi2, unset) {
	EXPECT_FALSE(chi2_stats({}, 0));
	EXPECT_FALSE(chi2_stats({1}, 0));
}

TEST(chi2, basic) {
	using T = std::vector<double>;
	// same as mma
	EXPECT_EQ(chi2_uniform_stats<T>({0.1})->value, 1);
	EXPECT_EQ(chi2_uniform_stats<T>({0.1})->df, 1);
	EXPECT_EQ(chi2_uniform_stats<T>({0.1, 0.1, 0.1, 0.1})->value, 12);
	EXPECT_EQ(chi2_uniform_stats<T>({0.1, 0.1, 0.1, 0.1})->df, 3);
	EXPECT_NEAR(chi2_uniform_stats<T>({0.1, 0.2, 0.3, 0.4, 0.5, 0.4, 0.8})->value, 3.71428, 1e-4);
	EXPECT_EQ(chi2_uniform_stats<T>({0.1, 0.2, 0.3, 0.4, 0.5, 0.4, 0.8})->df, 4);
}

TEST(chi2, large) {
	auto s = test_stream();
	std::vector<double> a;
	while (a.size() < 1000000) {
		a.push_back(rescale_type_to_01(s()));
	}
	const auto stat = chi2_uniform_stats(a);
	EXPECT_NEAR(stat->value, 485.4309, 1e-4);
	EXPECT_NEAR(stat->p_value, 0.6941, 1e-4);
}

TEST(chi2, no_change) {
	const auto r = chi2_test(50, test_stream()).front().stats;
	EXPECT_NEAR(r->value, 4.7999, 1e-4);
	EXPECT_NEAR(r->p_value, 0.8513, 1e-4);
}

TEST(chi2, mean_p_values) {
	const auto pv = {
		0.455946, 0.861258, 0.750944, 0.867248, 0.0939579, 0.264306, 0.865935, 0.937979, 0.91454, 0.891068, 0.283364, 0.645842, 0.857195, 0.335745, 0.176667, 0.831645, 0.764028, 0.833676, 0.569266, 0.964012, 0.907324, 0.0939823, 0.703169, 0.34809, 0.900709, 0.852884, 0.890387, 0.578589, 0.971378, 0.638171, 0.502444,
		0.548864, 0.377862, 0.97532, 0.658354, 0.654539, 0.771412, 0.266596, 0.946723, 0.388731, 0.819098, 0.832174, 0.42499, 0.831049, 0.846029, 0.613201, 0.709523, 0.723297, 0.267814, 0.476571, 0.881201, 0.229208, 0.613724, 0.522858, 0.873748, 0.178987, 0.411305, 0.315194, 0.983393, 0.146238, 0.549077, 0.832581,
		0.975443, 0.331811, 0.938311, 0.901847, 0.637875, 0.578752, 0.657043, 0.702627, 0.65479, 0.282659, 0.146095, 0.818037, 0.771902, 0.476848, 0.94719, 0.874833, 0.831734, 0.389324, 0.833319, 0.848122, 0.710694, 0.266718, 0.866814, 0.376425, 0.61267, 0.880393, 0.457288, 0.614355, 0.724553, 0.425244, 0.266108,
		0.866566, 0.410452, 0.228352, 0.752876, 0.523997, 0.983266, 0.599972, 0.891074, 0.313944, 0.525886, 0.424623, 0.179003, 0.0944959, 0.348532, 0.831049, 0.331778, 0.91307, 0.263882, 0.645128, 0.568051, 0.855667, 0.0939046, 0.963465, 0.17636, 0.425676, 0.526898, 0.599266, 0.764331, 0.863191, 0.889639, 0.85185,
		0.335664, 0.90796, 0.972895, 0.501844, 0.0774779, 0.0385151, 0.828461, 0.978485, 0.404726, 0.10942, 0.252626, 0.865361, 0.955292, 0.786657, 0.98808, 0.753939, 0.842799, 0.199872, 0.837129, 0.799311, 0.528665, 0.163552, 0.453254, 0.283331, 0.475319, 0.4318, 0.322802, 0.542995, 0.992672, 0.852845, 0.88821,
		0.242902, 0.357285, 0.502061, 0.904107, 0.77576, 0.431604, 0.949108, 0.964101, 0.634181, 0.524408, 0.799621, 0.389372, 0.404636, 0.680791, 0.47822, 0.0205126, 0.533726, 0.554671, 0.109287, 0.218202, 0.903613, 0.322599, 0.414027, 0.709817, 0.573394, 0.491781, 0.889629, 0.282353, 0.970292, 0.688311, 0.500723,
		0.533826, 0.167283, 0.419981, 0.256701, 0.322533, 0.903473, 0.678391, 0.163164, 0.357387, 0.776544, 0.635055, 0.798385, 0.523818, 0.94928, 0.388999, 0.682631, 0.480032, 0.109652, 0.227217, 0.555219, 0.962839, 0.432452, 0.0385446, 0.403804, 0.109033, 0.322633, 0.199458, 0.903556, 0.020438, 0.218209, 0.403943,
		0.850858, 0.491353, 0.57286, 0.418883, 0.166797, 0.415402, 0.970542, 0.256577, 0.689862, 0.0449408, 0.678286, 0.227329, 0.708701, 0.416261, 0.174118, 0.0104983, 0.78654, 0.252897, 0.173852, 0.866237, 0.0105355, 0.0446994, 0.416566, 0.0774745, 0.955595, 0.979158, 0.827854, 0.75325, 0.9899, 0.799013, 0.453688,
		0.837047, 0.474801, 0.842528, 0.432496, 0.543862, 0.528829, 0.993058, 0.242917
	};
	const auto s = chi2_uniform_stats(pv);
	EXPECT_NEAR(s->p_value, 0.0009388, 1e-4); // matches mma
}


}
