TODO:
-----
- Possible to seed all tests at startup
- Incremental tests should maybe be able to continue? emit results instead?
- What is a good fitness function. Design an experiment: 
	- which streams should be used  
		sources: (trng?, mixed, counter1, ?)
		(rrc, bit-isolation)
	- which tests should be used
		(remove redundant/correlated tests)
	- how many datapoints per test should be used 
		(preliminary minimum 5k-10k while 100k seems stable in terms of fails )
	- which fitness function works best? minimize kolmogorov, chi2, ad? all? count fails?
		(preliminary pretty much same-same it seems, but minimizing it might not be what we want (too regular?))
		(maybe optimize on outliers?)
		(probably how far it survives the tests, pract-rand style!)
- Determine false positive rate
- Trng should not have to lock?
- splits are added many times if same result formatter is used when n increases (see e.g. kendall_tau).

DONE:
-----
- Make it work with large n
	* need to run some tests multiple times (kendall and all that requires sorting etc)
	* need to be able to continue a stream
- Pass in cmd line args for trng file
- Proper tags instead of string contains in query
  Simple fix is to have exact match for mixer names. Lets see how far it goes.
- does divisibility work as it should? Or too few data points??
	- bit-isolation fails trng with d3:
		Using 16640 samples per test, each with 10000 data points.
		test             trng1       mx3          nasam       xmxmx       moremur      lea64        degski64   splitmix     murmur3    xmx
		divisibility-d2  P (169)     F*(171)      P (179)     P (151)     P (199)      P (169)      P (197)    P (191)      P (197)    F*(16617)
		divisibility-d3  F*(214)     P (187)      F*(256)     P (209)     P (226)      P (227)      P (187)    P (218)      P (198)    F*(11125)
		kolmogorov_d     0.00182935  0.000238291  0.0493007   0.00108469  0.0205633    0.000619493  0.0157931  0.0123172    0.232204   0
		anderson_a2      0.994346    0.999978     0.996995    0.999219    0.99981      0.999902     0.994976   0.997893     0.981366   1
		chi2             0.00244941  0.00051067   5.8374e-05  0.311584    3.19588e-07  0.0072541    0.155593   2.15719e-05  0.0774099  0
		fails            383         358          435         360         425          396          384        409          395        27742
	- have potential fixed commited, test it

OTHER:
------

	
	// not sure what to do with variance, can't get p values uniformly distributed.
	// https://www.youtube.com/watch?v=V4Rm4UQHij0 sampling dist of variance is not normal!
	// We can't use this for variance since it's sampling is non normal!
	// https://stats.stackexchange.com/questions/121662/why-is-the-sampling-distribution-of-variance-a-chi-squared-distribution
	//constexpr auto pop_var = 1. / 12.;
	//const auto var_x2 = (n - 1) * stats.variance / pop_var;
	//const auto p_value = chi2_distribution_normal_approximation_cdf(var_x2, n - 1);
	//const auto p_value = f_test(stats.n, stats.variance, population_variance);
	//const auto pop_var_var = 2 * pop_var * pop_var / (n - 1);
	//const auto p_value = z_test(stats.n, stats.variance, pop_var, pop_var_var);